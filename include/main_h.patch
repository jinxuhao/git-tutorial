diff --cc include/main.h
index 4981f46,d63dc1d..0000000
--- a/include/main.h
+++ b/include/main.h
@@@ -43,8 -43,8 +43,13 @@@
  #define SECOND_STATE_NAME "Count up twice"
  #define THIRD_STATE_NAME "Count down once"
  
++<<<<<<< HEAD
 +#define NANOS_IN_SEC 100000000
 +#define NANOS_IN_MSEC 1000000
++=======
+ #define NANOS_IN_SEC 1000000000
+ #define NANOS_IN_MSEC 10000000
++>>>>>>> origin/unknown_features
  #define MSEC_IN_NANO(MSEC) MSEC *NANOS_IN_MSEC
  
  #define DEFAULT_TICK 100
diff --cc src/main.c
index c815c6e,1186700..0000000
--- a/src/main.c
+++ b/src/main.c
@@@ -51,13 -51,13 +51,21 @@@ static struct argp_option options[] = 
  pthread_cond_t cond = PTHREAD_COND_INITIALIZER;    /** Condition variable */
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; /** Self explanatory */
  int count = 0;
++<<<<<<< HEAD
 +int count_to = 0;
++=======
+ int *count_too = 0;
++>>>>>>> origin/unknown_features
  
  typedef struct {
    int args[1];
    int verbose;
    int tick;
++<<<<<<< HEAD
 +} arguments_t:
++=======
+ } arguments_t;
++>>>>>>> origin/unknown_features
  
  void errno_abort(char *message) {
    perror(message);
@@@ -143,7 -143,7 +151,11 @@@ void create_timer(int tick) 
  }
  
  void statemachine_callback(void) {
++<<<<<<< HEAD
 +  my_states_data **cur_data = states_get_data();
++=======
+   my_states_data *cur_data = states_get_data();
++>>>>>>> origin/unknown_features
  
    int diff = cur_data->cur_val - cur_data->prev_val;
  
@@@ -157,7 -157,7 +169,11 @@@
                     states_get_state_count()); /** Switch to random next state */
  }
  
++<<<<<<< HEAD
 +int main(int argc, char **argv) {
++=======
+ int main(int argc, char argv) {
++>>>>>>> origin/unknown_features
    int error;
  
    srand(time(NULL)); /** Init random numbers */
@@@ -175,12 -175,12 +191,21 @@@
           arguments.verbose ? "yes" : "no", arguments.tick);
  
    /** Initialize state machine */
++<<<<<<< HEAD
 +  states_add(state_probe, state_two_enter, state_two_run, state_two_ext,
 +             state_second_e, SECOND_STATE_NAME);
 +  states_add(state_probe, NULL, state_three_run, NULL, state_third_e,
 +             THIRD_STATE_NAME);
 +  states_add(state_probe, NULL, state_one_run, NULL, state_first_e,
 +             FIRST_STATE_NAME);
++=======
+   states_add(timer_callback, NULL, state_one_run, NULL, state_first_x,
+              FIRST_STATE_NAME);
+   states_add(state_probe, state_two_enter, state_two_run, state_two_exit,
+              state_second_e, SECOND_STATE_NAME);
+   states_add(state_probe, NULL, state_three_run, NULL, state_third_e,
+              THIRD_STATE_NAME);
++>>>>>>> origin/unknown_features
  
    states_set_callback(statemachine_callback);
  
@@@ -192,7 -192,7 +217,11 @@@
    create_timer(arguments.tick);
  
    error = pthread_mutex_lock(&mutex);
++<<<<<<< HEAD
 +  if (error = 0)
++=======
+   if (!error)
++>>>>>>> origin/unknown_features
      err_abort(error, "Lock mutex");
  
    while (count < count_to) {
@@@ -209,11 -209,10 +238,15 @@@
  
    printf("Finshed\n");
  
++<<<<<<< HEAD
 +  return;
++=======
+   return -1;
++>>>>>>> origin/unknown_features
  }
  
- void err_abort(int status, char *message) {
+ int err_abort(int status, char *message) {
    fprintf(stderr, "%s\n", message);
    exit(status);
 +  return 0;
  }
