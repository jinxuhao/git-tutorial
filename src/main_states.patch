diff --cc include/main.h
index 4981f46,d63dc1d..0000000
--- a/include/main.h
+++ b/include/main.h
@@@ -43,8 -43,8 +43,9 @@@
  #define SECOND_STATE_NAME "Count up twice"
  #define THIRD_STATE_NAME "Count down once"
  
- #define NANOS_IN_SEC 100000000
- #define NANOS_IN_MSEC 1000000
++
+ #define NANOS_IN_SEC 1000000000
 -#define NANOS_IN_MSEC 10000000
++
  #define MSEC_IN_NANO(MSEC) MSEC *NANOS_IN_MSEC
  
  #define DEFAULT_TICK 100
diff --cc src/main.c
index c815c6e,1186700..0000000
--- a/src/main.c
+++ b/src/main.c
@@@ -51,13 -51,13 +51,17 @@@ static struct argp_option options[] = 
  pthread_cond_t cond = PTHREAD_COND_INITIALIZER;    /** Condition variable */
  pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; /** Self explanatory */
  int count = 0;
 -int *count_too = 0;
++
 +int count_to = 0;
 +
++
+ 
  typedef struct {
    int args[1];
    int verbose;
    int tick;
- } arguments_t:
++
+ } arguments_t;
  
  void errno_abort(char *message) {
    perror(message);
@@@ -91,6 -91,6 +95,12 @@@ static error_t parse_opt(int key, char 
  
  static struct argp argp = {options, parse_opt, args_doc, doc};
  
++int err_abort(int status, char *message) {
++  fprintf(stderr, "%s\n", message);
++  exit(status);
++  return 0;
++}
++
  void timer_callback(union sigval arg) {
    int error;
  
@@@ -107,6 -107,6 +117,7 @@@
    }
  
    error = pthread_mutex_unlock(&mutex);
++ 
    if (error != 0)
      err_abort(error, "Callback unlocking");
  }
@@@ -140,11 -140,11 +151,14 @@@ void create_timer(int tick) 
        timer_settime(our_timer, 0, &timer_specs, 0); /** Set timer interval */
    if (error == -1)
      errno_abort("Setting timer");
++
  }
  
  void statemachine_callback(void) {
-   my_states_data **cur_data = states_get_data();
++
+   my_states_data *cur_data = states_get_data();
+ 
 +
    int diff = cur_data->cur_val - cur_data->prev_val;
  
    count += diff;
@@@ -157,7 -157,7 +171,9 @@@
                     states_get_state_count()); /** Switch to random next state */
  }
  
 -int main(int argc, char argv) {
++
 +int main(int argc, char **argv) {
++
    int error;
  
    srand(time(NULL)); /** Init random numbers */
@@@ -175,13 -175,13 +191,16 @@@
           arguments.verbose ? "yes" : "no", arguments.tick);
  
    /** Initialize state machine */
-   states_add(state_probe, state_two_enter, state_two_run, state_two_ext,
++
++ 
+   states_add(timer_callback, NULL, state_one_run, NULL, state_first_x,
+              FIRST_STATE_NAME);
+   states_add(state_probe, state_two_enter, state_two_run, state_two_exit,
               state_second_e, SECOND_STATE_NAME);
    states_add(state_probe, NULL, state_three_run, NULL, state_third_e,
               THIRD_STATE_NAME);
-   states_add(state_probe, NULL, state_one_run, NULL, state_first_e,
-              FIRST_STATE_NAME);
+ 
 +
    states_set_callback(statemachine_callback);
  
    states_init();
@@@ -192,7 -192,7 +211,9 @@@
    create_timer(arguments.tick);
  
    error = pthread_mutex_lock(&mutex);
-   if (error = 0)
 -  if (!error)
++
++  if (error!=0)
++
      err_abort(error, "Lock mutex");
  
    while (count < count_to) {
@@@ -209,11 -209,10 +230,5 @@@
  
    printf("Finshed\n");
  
-   return;
 -  return -1;
--}
--
- void err_abort(int status, char *message) {
 -int err_abort(int status, char *message) {
--  fprintf(stderr, "%s\n", message);
--  exit(status);
 +  return 0;
  }
